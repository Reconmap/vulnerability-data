import Link from "next/link";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";

const Header = ({ years }) => {
  const router = useRouter();
  const [list, setList] = useState();
  const [searching, setSearching] = useState(false);
  const fetchList = async () => {
    const res = await fetch("/api/search", { method: "GET", headers: { "content-type": "application/json" } });
    const json = await res.json();
    setList(json);
  };

  useEffect(() => {
    fetchList();
  }, []);

  const handlePressEnter = (e) => {
    if (e.code === "Enter" || e.charCode === 13) {
      setSearching(true);
      const year = e.target.value.split("-")[0];
      const id = e.target.value.split("-")[1];
      router.push(`/${year}/CVE-${year}-${id}`);
      setSearching(false);
    }
  };

  return (
    <div className="navbar mb-2 shadow-lg bg-neutral text-neutral-content ">
      <div className="flex-none px-2 mx-2">
        <Link href={`/`} passHref>
          <a>
            <h1 className="text-lg font-bold">Vulnerability Data</h1>
          </a>
        </Link>
      </div>
      <div className="flex-1 px-2 mx-2">
        <div className="items-stretch hidden lg:flex">
          {years.map((year) => (
            <Link href={`/${year}`} passHref key={year}>
              <a className={`btn btn-ghost   ${router.asPath.split("/")[1].includes(year) ? "bg-neutral-focus" : ""} `}>{year}</a>
            </Link>
          ))}
        </div>
      </div>
      <div>
        {searching && (
          <span className="px-3 opacity-50">
            <svg className="w-6 h-6 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
          </span>
        )}
        <input
          onKeyPress={handlePressEnter}
          placeholder="Search..."
          className={`input input-bordered input-ghost ${list || searching ? "" : "input-disabled"}`}
          type="search"
          list="vulnerabilities-list"
        ></input>
        {list && (
          <datalist id="vulnerabilities-list" className="d-none hidden">
            {list.map((item) => (
              <option key={item} value={item}>
                CVE-{item}
              </option>
            ))}
          </datalist>
        )}
      </div>
    </div>
  );
};

export default Header;
