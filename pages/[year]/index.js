import Link from "next/link";
import React, { useState } from "react";
import fs from "fs";
import Layout from "../../components/Layout";
import Head from "next/head";
import path from "path";
const LIMIT = 400;

const Year = ({ year, documents, years }) => {
  const [page, setPage] = useState(0);
  const handlePrevPage = () => setPage(page - 1);
  const handleNextPage = () => setPage(page + 1);
  return (
    <Layout years={years}>
      <Head>
        <title>{year} | Vulnerability Data</title>
      </Head>
      <div className=" breadcrumbs">
        <ul>
          <li>
            <Link href="/" passHref>
              <a>By Year</a>
            </Link>
          </li>
          <li>{year}</li>
        </ul>
      </div>
      <div className="flex justify-between items-center mb-10">
        <h2 className="py-6 text-2xl font-bold">
          Vulnerabilities reported in {year} <span className="badge badge-primary">{documents.length}</span>
        </h2>
        {/* <input className="input input-bordered" placeholder="Search..." onChange={handleSearch} /> */}
        <div className="flex items-center gap-2">
          {page > 1 && (
            <a className={`btn btn-circle ${page === 1 ? "btn-disabled" : ""}`} onClick={handlePrevPage}>
              ←
            </a>
          )}
          <span className="btn btn-circle pointer-events-none" onClick={handlePrevPage}>
            {page}
          </span>
          <a className="btn btn-circle" onClick={handleNextPage}>
            →
          </a>
        </div>
      </div>
      <div className="card card-bordered">
        <div className="card-body">
          <ul className="text-sm flex flex-wrap gap-2 document-links">
            {documents
              // .filter((document) => document.indexOf(query) > -1)
              .slice(page * LIMIT, page * LIMIT + LIMIT)
              .map((document) => (
                <li key={document}>
                  <Link passHref href={`/${year}/CVE-${year}-${document}`}>
                    <a>{document}</a>
                  </Link>
                </li>
              ))}
          </ul>
        </div>
      </div>
    </Layout>
  );
};

export default Year;

export const getStaticProps = async (ctx) => {
  // const years = fs.readdirSync("./data").map((file) => file.match(/\d+/g));
  const years = ["2019", "2020", "2021", "2022"];
  const dataFolder = path.join(process.cwd(), `data/${ctx.params.year}.json`);
  var json = fs.readFileSync(dataFolder, "utf8");
  return {
    props: {
      years: years,
      year: ctx.params.year,
      documents: JSON.parse(json)
        .cvrfdoc.Vulnerability.filter((doc) => {
          if (Array.isArray(doc.Notes.Note)) {
            return !(doc.Notes.Note[0]._text.includes("** REJECT **") || doc.Notes.Note[0]._text.includes("** RESERVED **"));
          } else {
            return !(doc.Notes.Note._text.includes("** REJECT **") || doc.Notes.Note._text.includes("** RESERVED **"));
          }
        })
        .map((doc) => doc.Title._text.split("-")[2]),
    },
  };
};

export const getStaticPaths = async (ctx) => {
  // const files = fs.readdirSync("./data");
  const years = ["2019", "2020", "2021", "2022"];

  return {
    paths: years.map((year) => ({
      params: {
        year: year,
      },
    })),
    fallback: false,
  };
};
