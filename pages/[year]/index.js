import Head from "next/head";
import Link from "next/link";
import React, { useState } from "react";
import Layout from "../../components/Layout";
import clientPromise from "../../services/database";
import Years from "../../types/Years";

const LIMIT = 400;

const Year = ({ year, documents }) => {
  const [page, setPage] = useState(0);
  const handlePrevPage = () => setPage(page - 1);
  const handleNextPage = () => setPage(page + 1);

  return (
    <Layout years={Years}>
      <Head>
        <title>{year} | Vulnerability Data</title>
      </Head>
      <div className=" breadcrumbs">
        <ul>
          <li>
            <Link href="/" passHref>
              <a>By Year</a>
            </Link>
          </li>
          <li>{year}</li>
        </ul>
      </div>
      <div className="flex justify-between items-center mb-10">
        <h2 className="py-6 text-2xl font-bold">
          Vulnerabilities reported in {year} <span className="badge border-0 relative -top-1 ml-2 bg-reconmap">{documents.length}</span>
        </h2>
        <div className="flex items-center gap-2">
          {page > 1 && (
            <a className={`btn  ${page === 1 ? "btn-disabled" : ""}`} onClick={handlePrevPage}>
              ←
            </a>
          )}
          <span className="btn  pointer-events-none" onClick={handlePrevPage}>
            {page}
          </span>
          <a className="btn " onClick={handleNextPage}>
            →
          </a>
        </div>
      </div>
      <ul className="text-sm flex flex-wrap gap-1 document-links">
        {documents.slice(page * LIMIT, page * LIMIT + LIMIT).map((document) => (
          <li key={document}>
            <Link passHref href={`/details/${document.id}`}>
              <a>{document.id.split('-')[2]}</a>
            </Link>
          </li>
        ))}
      </ul>
    </Layout>
  );
};

export default Year;

export const getStaticProps = async (ctx) => {
  const conn = await clientPromise;
  const db = conn.db("vd-db");
  const cves = await db.collection("cves").find({ published_date: { $regex: ctx.params.year } }).project({ _id: 0, id: 1 }).sort({ id: 1 }).toArray();
  return {
    props: {
      year: ctx.params.year,
      documents: cves
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: Years.map(year => ({
      params: {
        year: year,
      },
    })),
    fallback: false,
  };
};
