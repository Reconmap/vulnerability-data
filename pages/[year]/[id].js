import React from "react";
import fs from "fs";
import Layout from "./../../components/Layout";
import Link from "next/link";
import dayjs from "dayjs";
import Head from "next/head";
import path from "path";

import { useRouter } from "next/router";
const Vulnerability = ({ document, year, years }) => {
  const router = useRouter();

  if (router.isFallback) {
    return <Layout>Loading...</Layout>;
  }

  const handlePrint = () => {
    window.print();
  };
  return (
    <Layout years={years}>
      <Head>
        <title>
          {document.Title._text} | {year} | Vulnerability Data
        </title>
      </Head>
      <div className=" breadcrumbs">
        <ul>
          <li>
            <Link href="/" passHref>
              <a>By Year</a>
            </Link>
          </li>
          <li>
            <Link href={`/${year}`} passHref>
              <a>{year}</a>
            </Link>
          </li>
          <li>{document.Title._text}</li>
        </ul>
      </div>
      <div className="flex justify-between items-center mb-10">
        <h2 className="text-6xl py-4 font-mono ">
          <span className=" text-neutral">{document.Title._text.split("-")[0]}-</span>
          <span className=" text-neutral-focus">{document.Title._text.split("-")[1]}-</span>
          <span className=" bg-neutral font-medium px-2 text-neutral-content">{document.Title._text.split("-")[2]}</span>
        </h2>
        <div className="items-center flex gap-3">
          <button className="btn btn-ghost btn-circle" onClick={handlePrint}>
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"
              ></path>
            </svg>
          </button>
          <a className="btn btn-primary" href="https://reconmap.org">
            Track security vulnerabilities{" "}
            <svg className="ml-2 w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 9l3 3m0 0l-3 3m3-3H8m13 0a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </a>
        </div>
      </div>
      <h2 className="text-xl mb-10">{document.Notes.Note.length > 0 ? document.Notes.Note[0]._text : document.Notes.Note._text}</h2>
      <div className="w-full card-bordered stats my-6">
        <div className="stat">
          <div className="stat-figure text-primary">
            <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
              ></path>
            </svg>
          </div>
          <div className="stat-title">Published at</div>
          <div className="stat-value text-primary">{document.Notes.Note[1]?._text}</div>
          <div className="stat-desc">{document.Notes.Note[1] ? dayjs().diff(dayjs(document.Notes.Note[1]?._text), "days") + " days ago" : "We dont know"} </div>
        </div>
        <div className="stat">
          <div className="stat-figure text-info">
            <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
            </svg>
          </div>
          <div className="stat-title">Modified</div>
          <div className="stat-value text-info">{document.Notes.Note[2]?._text}</div>
          <div className="stat-desc">{document.Notes.Note[2] ? dayjs().diff(dayjs(document.Notes.Note[2]?._text), "days") + " days ago" : "We dont know"} </div>
        </div>
        <div className="stat">
          <div className="stat-figure text-info mask mask-circle bg-base-300 w-16 h-16 flex items-center justify-center">
            <svg className="w-8 h-8 text-neutral" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z"></path>
            </svg>
          </div>
          <div className="stat-value">{year}</div>
          <div className="stat-title">Year</div>
          <div className="stat-desc text-info">The year of the turtle</div>
        </div>
      </div>
      <section className="grid md:grid-cols-2 gap-4">
        {document.References && document.References.Reference ? (
          document.References.Reference.length > 0 ? (
            document.References.Reference.map((referencia) => (
              <>
                <div className="card lg:card-side card-bordered mb-10">
                  <div className="card-body">
                    <h2 className="card-title">{referencia.URL?._text}</h2>
                    <p>{referencia.Description._text}</p>
                    <div className="card-actions">
                      <a className="btn btn-primary" href={referencia.URL?._text} target="_blank" rel="noreferrer">
                        Read More about it
                      </a>
                    </div>
                  </div>
                </div>
              </>
            ))
          ) : (
            <>
              <div className="card lg:card-side card-bordered mb-10">
                <div className="card-body">
                  <h2 className="card-title">{document.References.Reference.URL._text}</h2>
                  <p>{document.References.Reference.Description._text}</p>
                  <div className="card-actions">
                    <a className="btn btn-primary" href={document.References.Reference.URL._text} target="_blank" rel="noreferrer">
                      Read More about it
                    </a>
                  </div>
                </div>
              </div>
            </>
          )
        ) : (
          <>No References</>
        )}

        <div className="card card-bordered bg-neutral-focus text-neutral-content  text-xs">
          <div className="card-body">
            <h2 className="card-title">Vulnerability RAW</h2>
            <pre className="whitespace-pre-wrap">{JSON.stringify(document, null, "\t")}</pre>
          </div>
        </div>
      </section>
    </Layout>
  );
};

export default Vulnerability;

export const getStaticProps = async (ctx) => {
  // const years = await fs.readdirSync("./data").map((file) => file.match(/\d+/g));
  const years = ["2019", "2020", "2021", "2022"];

  // var json = await fs.readFileSync(`./data/${ctx.params.year}.json`, "utf8");
  const dataFolder = path.join(process.cwd(), `data/${ctx.params.year}.json`);
  var json = fs.readFileSync(dataFolder, "utf8");

  return {
    props: {
      years,
      year: ctx.params.year,
      document: JSON.parse(json).cvrfdoc.Vulnerability.find((doc) => doc.Title._text === ctx.params.id),
    },
    revalidate: 86400, // a day
  };
};

export const getStaticPaths = async (ctx) => {
  // const years = fs.readdirSync("./data").map((file) => file.split(".")[0]);
  const years = ["2019", "2020", "2021", "2022"];
  const consolidate = {};
  for (let i = 0; i < years.length; i++) {
    const dataFolder = path.join(process.cwd(), `data/${years[i]}.json`);
    var json = fs.readFileSync(dataFolder, "utf8");
    // var json = fs.readFileSync(`./data/${years[i]}.json`, "utf8");

    consolidate[years[i]] = JSON.parse(json).cvrfdoc.Vulnerability;
  }

  const paths = Object.entries(consolidate).map(([year, vulnerabilities]) => {
    return vulnerabilities
      .filter((doc) => {
        if (Array.isArray(doc.Notes.Note)) {
          return !(doc.Notes.Note[0]._text.includes("** REJECT **") || doc.Notes.Note[0]._text.includes("** RESERVED **"));
        } else {
          return !(doc.Notes.Note._text.includes("** REJECT **") || doc.Notes.Note._text.includes("** RESERVED **"));
        }
      })
      .slice(0, 200)
      .map((vulnerability) => {
        return {
          params: {
            year: String(year),
            id: String(vulnerability.Title._text),
          },
        };
      });
  });

  return {
    paths: paths.flat(),
    fallback: true,
  };
};
